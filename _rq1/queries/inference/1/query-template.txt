===== TASK DESCRIPTION =====
Given a Java test prefix, generate the test oracle to add to the current test prefix substituting the mask placeholder <mask_id> (the oracle must conform the api of given JUnit version).
Put your answer between: <keep></keep> and reply only with the assertion (do not add any context or comments).
The content of the answer must be less than 200 characters.
Do not show me the reasoning behind your answer, but only the answer in the mentioned format.

===== EXAMPLES =====
Here are 3 examples of queries and expected answers:

Query:
// Test prefix
public void testMergeNodes() throws Exception {
    List<Node> fromParents = new ArrayList<>();
    fromParents.add(ManifestTestUtils.createNode(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""                        <sentinel3:duration>179</sentinel3:duration>"").getFirstChild());
    fromParents.add(ManifestTestUtils.createNode(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""                     <sentinel3:duration>179</sentinel3:duration>"").getFirstChild());
    fromParents.add(ManifestTestUtils.createNode(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""                     <sentinel3:duration>179</sentinel3:duration>"").getFirstChild());
    Document manifest = ManifestTestUtils.createDocument();
    final Element manifestElement = manifest.createElement(""sentinel3:duration"");
    manifest.appendChild(manifestElement);
    new DurationMerger().mergeNodes(fromParents, manifestElement, manifest);
    <mask_id>
}

// Junit Version
JUnit 4

Answer:
<keep>assertEquals(0, manifestElement.getAttributes().getLength());</keep>

Query:
// Test prefix
public void testAddGetCoefficients() {
    SstCoefficients coeffs1 = new SstCoefficients(1, 2);
    SstCoefficients coeffs2 = new SstCoefficients(3, 5);
    SstCoefficients coeffs3 = new SstCoefficients(6, 11);
    // initially there shall be no ranges contained
    assertEquals(0, _set.getNumCoefficients());
    IllegalArgumentException e41 = assertThrows(""exception expected"", IllegalArgumentException.class, () -> _set.addCoefficients(null));
    // get it back
    _set.addCoefficients(coeffs1);
    assertEquals(1, _set.getNumCoefficients());
    assertEquals(coeffs1, _set.getCoefficientsAt(0));
    // get them back
    _set.addCoefficients(coeffs2);
    assertEquals(2, _set.getNumCoefficients());
    assertEquals(coeffs2, _set.getCoefficientsAt(1));
    _set.addCoefficients(coeffs3);
    assertEquals(3, _set.getNumCoefficients());
    assertEquals(coeffs3, _set.getCoefficientsAt(2));
    <mask_id>
}

// Junit Version
JUnit 4

Answer:
<keep>Exception e42 = assertThrows(""exception expected"", Exception.class, () -> _set.getCoefficientsAt(-3));</keep>

Query:
// Test prefix
public void testTiePointAccess() {
    // initially empty
    assertEquals(0, prod.getTiePointNames().length);
    String[] tp = new String[] { ""tie_point_1"", ""tie_point_2"", ""tie_point_3"" };
    String[] sc = new String[] { ""scale_1"", ""scale_2"", ""scale_3"" };
    String[] of = new String[] { ""off_1"", ""off_2"", ""off_3"" };
    String[] un = new String[] { ""unit_1"", ""unit_2"", ""unit_3"" };
    for (int n = 0; n < 3; n++) {
        prod.addTiePointGrid(new ModisTiePointDescription(tp[n], sc[n], of[n], un[n]));
    }
    String[] tpNames = prod.getTiePointNames();
    assertNotNull(tpNames);
    assertEquals(3, tpNames.length);
    for (int n = 0; n < 3; n++) {
        <mask_id>
    }
}

// Junit Version
JUnit 4

Answer:
<keep>assertEquals(tp[n], tpNames[n]);</keep>

===== TASK TO EXECUTE =====
Here is the query for this task:

Query:
<QUERY_INPUT>

Answer: